(define-syntax <keyword> <exp>)
(define-syntax (<keyword> . <formals>) <exp1> <exp> ...)
(let-syntax ((<keyword> <exp>) ...) <exp*> ...)
(letrec-syntax ((<keyword> <exp>) ...) <exp*> ...)
(identifier? obj)
(bound-identifier=? obj1 obj2)
(free-identifier=? obj1 obj2)
(literal-identifier=? obj1 obj2)
(syntax <datum>)
(quasisyntax <template>)
(datum->syntax-object template-identifier obj)
(syntax-object->datum syntax-object)
(make-capturing-identifier template-identifier symbol)
(begin-for-syntax <form> ...)
(around-syntax <before-exp> <form> <after-exp>)
(syntax-error obj ...)
(syntax-case <exp> (<literal> ...) <clause> ...)
(with-syntax <template>)
(syntax-rules <template>)
