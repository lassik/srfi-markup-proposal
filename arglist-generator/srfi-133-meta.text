((make-vector size [fill]) -> vector)
((vector x ...) -> vector)
((vector-unfold f length initial-seed ...) -> vector)
((vector-unfold-right f length initial-seed ...) -> vector)
((vector-copy vec [start [end]]) -> vector)
((vector-reverse-copy vec [start [end]]) -> vector)
((vector-append vec ...) -> vector)
((vector-concatenate list-of-vectors) -> vector)
((vector-append-subvectors [vec start end] ...) -> vector)
((vector? x) -> boolean)
((vector-empty? vec) -> boolean)
((vector= elt=? vec ...) -> boolean)
((vector-ref vec i) -> value)
((vector-length vec) -> exact nonnegative integer)
((vector-fold kons knil vec1 vec2 ...) -> value)
((vector-fold-right kons knil vec1 vec2 ...) -> value)
((vector-map f vec1 vec2 ...) -> vector)
((vector-map! f vec1 vec2 ...) -> unspecified)
((vector-for-each f vec1 vec2 ...) -> unspecified)
((vector-count pred? vec1 vec2 ...) -> exact nonnegative integer)
((vector-cumulate f knil vec) -> vector)
((vector-index pred? vec1 vec2 ...) -> exact nonnegative integer or #f)
((vector-index-right pred? vec1 vec2 ...) -> exact nonnegative integer or #f)
((vector-skip pred? vec1 vec2 ...) -> exact nonnegative integer or #f)
((vector-skip-right pred? vec1 vec2 ...) -> exact nonnegative integer or #f)
((vector-binary-search vec value cmp) -> exact nonnegative integer or #f)
((vector-any pred? vec1 vec2 ...) -> value or #f)
((vector-every pred? vec1 vec2 ...) -> value or #f)
((vector-partition pred? vec) -> vector and integer)
((vector-set! vec i value) -> unspecified)
((vector-swap! vec i j) -> unspecified)
((vector-fill! vec fill [start [end]]) -> unspecified)
((vector-reverse! vec [start [end]]) -> unspecified)
((vector-copy! to at from [start [end]]) -> unspecified)
((vector-reverse-copy! to at from [start [end]]) -> unspecified)
((vector-unfold! f vec start end initial-seed ...) -> unspecified)
((vector-unfold-right! f vec start end initial-seed ...) -> unspecified)
((vector->list vec [start [end]]) -> proper-list)
((reverse-vector->list vec [start [end]]) -> proper-list)
((list->vector proper-list) -> vector)
((reverse-list->vector proper-list) -> vector)
((string->vector string [start [end]]) -> vector)
((vector->string vec [start [end]]) -> string)
